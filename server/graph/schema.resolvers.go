package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"

	"github.com/staszkiet/DictionaryGolang/server/graph/model"
)

// CreateWord is the resolver for the createWord field.
func (r *mutationResolver) CreateWord(ctx context.Context, polish string, translation model.NewTranslation) (bool, error) {
	return r.DB.CreateWordOrAddTranslationOrSentence(ctx, polish, translation)
}

// CreateSentence is the resolver for the createSentence field.
func (r *mutationResolver) CreateSentence(ctx context.Context, polish string, english string, sentence string) (bool, error) {
	return r.DB.CreateWordOrAddTranslationOrSentence(ctx, polish, model.NewTranslation{English: english, Sentences: []string{sentence}})
}

// CreateTranslation is the resolver for the createTranslation field.
func (r *mutationResolver) CreateTranslation(ctx context.Context, polish string, translation model.NewTranslation) (bool, error) {
	return r.DB.CreateWordOrAddTranslationOrSentence(ctx, polish, translation)
}

// DeleteSentence is the resolver for the deleteSentence field.
func (r *mutationResolver) DeleteSentence(ctx context.Context, polish string, english string, sentence string) (bool, error) {
	return r.DB.DeleteSentence(ctx, polish, english, sentence)
}

// DeleteTranslation is the resolver for the deleteTranslation field.
func (r *mutationResolver) DeleteTranslation(ctx context.Context, polish string, english string) (bool, error) {
	return r.DB.DeleteTranslation(ctx, polish, english)
}

// DeleteWord is the resolver for the deleteWord field.
func (r *mutationResolver) DeleteWord(ctx context.Context, polish string) (bool, error) {

	return r.DB.DeleteWord(ctx, polish)
}

// UpdateWord is the resolver for the updateWord field.
func (r *mutationResolver) UpdateWord(ctx context.Context, polish string, newPolish string) (bool, error) {
	return r.DB.UpdateWord(ctx, polish, newPolish)
}

// UpdateTranslation is the resolver for the updateTranslation field.
func (r *mutationResolver) UpdateTranslation(ctx context.Context, polish string, english string, newEnglish string) (bool, error) {
	return r.DB.UpdateTranslation(ctx, polish, english, newEnglish)
}

// UpdateSentence is the resolver for the updateSentence field.
func (r *mutationResolver) UpdateSentence(ctx context.Context, polish string, english string, sentence string, newSentence string) (bool, error) {
	return r.DB.UpdateSentence(ctx, polish, english, sentence, newSentence)
}

// SelectWord is the resolver for the selectWord field.
func (r *queryResolver) SelectWord(ctx context.Context, polish string) (*model.Word, error) {
	return r.DB.SelectWord(ctx, polish)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
