package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"

	"github.com/staszkiet/DictionaryGolang/graph/model"
)

// CreateWord is the resolver for the createWord field.
func (r *mutationResolver) CreateWord(ctx context.Context, polish string, translation model.NewTranslation) (*model.Word, error) {
	var convertedTranslations []*model.Translation
	var sentences []*model.Sentence

	sentences = make([]*model.Sentence, 0)
	for _, s := range translation.Sentences {
		sentences = append(sentences, &model.Sentence{ID: "0", Sentence: s})
	}
	convertedTranslations = append(convertedTranslations, &model.Translation{ID: "0",
		English:   translation.English,
		Sentences: sentences,
	})

	ret := &model.Word{
		ID:           "0",
		Polish:       polish,
		Translations: convertedTranslations,
	}
	r.words = append(r.words, ret)
	return ret, nil
}

// Words is the resolver for the words field.
func (r *queryResolver) Words(ctx context.Context) ([]*model.Word, error) {
	return r.words, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
