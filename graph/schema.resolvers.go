package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"

	dbmodels "github.com/staszkiet/DictionaryGolang/database/models"
	"github.com/staszkiet/DictionaryGolang/graph/model"
)

// CreateWord is the resolver for the createWord field.
func (r *mutationResolver) CreateWord(ctx context.Context, polish string, translation model.NewTranslation) (bool, error) {

	sentences := make([]dbmodels.Sentence, 0)

	for _, s := range translation.Sentences {
		sentences = append(sentences, dbmodels.Sentence{Sentence: s})
	}

	var convertedTranslations []dbmodels.Translation

	convertedTranslations = append(convertedTranslations, dbmodels.Translation{
		English:   translation.English,
		Sentences: sentences,
	})

	ret := &dbmodels.Word{
		Polish:       polish,
		Translations: convertedTranslations,
	}

	tx := r.DB.Begin()
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	if err := tx.Error; err != nil {
		return false, err
	}

	if err := tx.Create(ret).Error; err != nil {
		tx.Rollback()
		return false, err
	}

	return true, tx.Commit().Error
}

// CreateSentence is the resolver for the createSentence field.
func (r *mutationResolver) CreateSentence(ctx context.Context, polish string, english string, sentence string) (bool, error) {
	var word dbmodels.Word

	tx := r.DB.Begin()
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	if err := tx.Error; err != nil {
		return false, err
	}

	err := tx.Model(&dbmodels.Word{}).Preload("Translations.Sentences").Where("polish = ?", polish).First(&word).Error
	if err != nil {
		return false, err
	}

	for i, t := range word.Translations {

		if t.English == english {
			word.Translations[i].Sentences = append(word.Translations[i].Sentences, dbmodels.Sentence{Sentence: sentence})
		}
	}

	if err = tx.Save(word).Error; err != nil {
		tx.Rollback()
		return false, err
	}

	return true, tx.Commit().Error
}

// CreateTranslation is the resolver for the createTranslation field.
func (r *mutationResolver) CreateTranslation(ctx context.Context, polish string, translation model.NewTranslation) (bool, error) {

	var word dbmodels.Word
	sentences := make([]dbmodels.Sentence, 0)

	for _, s := range translation.Sentences {
		sentences = append(sentences, dbmodels.Sentence{Sentence: s})
	}

	tx := r.DB.Begin()
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	if err := tx.Error; err != nil {
		return false, err
	}

	err := tx.Model(&dbmodels.Word{}).Preload("Translations.Sentences").Where("polish = ?", polish).First(&word).Error
	if err != nil {
		return false, err
	}

	word.Translations = append(word.Translations, dbmodels.Translation{
		English:   translation.English,
		Sentences: sentences,
	})

	if err = tx.Save(word).Error; err != nil {
		tx.Rollback()
		return false, err
	}

	return true, tx.Commit().Error
}

// DeleteSentence is the resolver for the deleteSentence field.
func (r *mutationResolver) DeleteSentence(ctx context.Context, polish string, english string, sentence string) (bool, error) {
	var s dbmodels.Sentence

	tx := r.DB.Begin()
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	if err := tx.Error; err != nil {
		return false, err
	}

	err := tx.Joins("JOIN translations ON sentences.translation_id = translations.id").
		Joins("JOIN words ON words.id = translations.word_id").
		Where("words.polish = ? AND translations.english = ? AND sentences.sentence = ?", polish, english, sentence).
		First(&s).Error
	if err != nil {
		return false, err
	}

	if err := tx.Delete(s).Error; err != nil {
		tx.Rollback()
		return false, err
	}

	return true, tx.Commit().Error
}

// DeleteTranslation is the resolver for the deleteTranslation field.
func (r *mutationResolver) DeleteTranslation(ctx context.Context, polish string, english string) (bool, error) {
	var translation dbmodels.Translation
	var count int64

	tx := r.DB.Begin()
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	if err := tx.Error; err != nil {
		return false, err
	}

	err := tx.Joins("RIGHT JOIN words ON words.id = translations.word_id").
		Where("words.polish = ? AND translations.english = ?", polish, english).
		First(&translation).Error
	if err != nil {
		return false, err
	}

	if err := tx.Model(&translation).Delete(&translation).Error; err != nil {
		tx.Rollback()
		return false, err
	}

	if err := tx.Model(&dbmodels.Translation{}).Where("word_id = ?", translation.WordID).Count(&count).Error; err != nil {
		tx.Rollback()
		return false, err
	}

	if count == 0 {
		if err := tx.Where("ID = ?", translation.WordID).Delete(&dbmodels.Word{}).Error; err != nil {
			tx.Rollback()
			return false, err
		}
	}

	return true, tx.Commit().Error
}

// DeleteWord is the resolver for the deleteWord field.
func (r *mutationResolver) DeleteWord(ctx context.Context, polish string) (bool, error) {
	var word dbmodels.Word

	tx := r.DB.Begin()
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	if err := tx.Error; err != nil {
		return false, err
	}

	if err := tx.Where("polish = ?", polish).First(&word).Error; err != nil {
		return false, err
	}

	if err := tx.Delete(&word).Error; err != nil {
		tx.Rollback()
		return false, err
	}

	return true, tx.Commit().Error
}

// UpdateWord is the resolver for the updateWord field.
func (r *mutationResolver) UpdateWord(ctx context.Context, polish string, newPolish string) (bool, error) {
	var word dbmodels.Word

	tx := r.DB.Begin()
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	if err := tx.Error; err != nil {
		return false, err
	}

	err := tx.Model(&dbmodels.Word{}).Where("polish = ?", polish).First(&word).Error
	if err != nil {
		return false, err
	}

	if err := tx.Model(&word).Update("polish", newPolish).Error; err != nil {
		tx.Rollback()
		return false, err
	}

	return true, tx.Commit().Error
}

// UpdateTranslation is the resolver for the updateTranslation field.
func (r *mutationResolver) UpdateTranslation(ctx context.Context, polish string, english string, newEnglish string) (bool, error) {

	var translation dbmodels.Translation

	tx := r.DB.Begin()
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	if err := tx.Error; err != nil {
		return false, err
	}

	err := tx.Joins("RIGHT JOIN words ON words.id = translations.word_id").
		Where("words.polish = ? AND translations.english = ?", polish, english).
		First(&translation).Error

	if err != nil {
		return false, err
	}

	err = tx.Model(&translation).Update("english", newEnglish).Error
	if err != nil {
		tx.Rollback()
		return false, err
	}

	return true, tx.Commit().Error
}

// UpdateSentence is the resolver for the updateSentence field.
func (r *mutationResolver) UpdateSentence(ctx context.Context, polish string, english string, sentence string, newSentence string) (bool, error) {

	var s dbmodels.Sentence

	tx := r.DB.Begin()
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	if err := tx.Error; err != nil {
		return false, err
	}

	err := tx.Joins("JOIN translations ON sentences.translation_id = translations.id").
		Joins("JOIN words ON words.id = translations.word_id").
		Where("words.polish = ? AND translations.english = ? AND sentences.sentence = ?", polish, english, sentence).
		First(&s).Error

	if err != nil {
		return false, err
	}

	err = tx.Model(&s).Update("sentence", newSentence).Error
	if err != nil {
		tx.Rollback()
		return false, err
	}

	return true, tx.Commit().Error
}

// SelectWord is the resolver for the selectWord field.
func (r *queryResolver) SelectWord(ctx context.Context, polish string) (*model.Word, error) {
	var word dbmodels.Word

	if err := r.DB.Preload("Translations.Sentences").Where("polish = ?", polish).First(&word).Error; err != nil {
		return nil, err
	}

	return dbmodels.DBWordToGQLWord(&word), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
