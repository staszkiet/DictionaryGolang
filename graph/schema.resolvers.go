package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"fmt"

	"github.com/staszkiet/DictionaryGolang/database"
	dbmodels "github.com/staszkiet/DictionaryGolang/database/models"
	"github.com/staszkiet/DictionaryGolang/graph/model"
)

// CreateWord is the resolver for the createWord field.
func (r *mutationResolver) CreateWord(ctx context.Context, polish string, translation model.NewTranslation) (*model.Word, error) {
	var convertedTranslations []dbmodels.Translation
	var sentences []dbmodels.Sentence

	sentences = make([]dbmodels.Sentence, 0)
	for _, s := range translation.Sentences {
		sentences = append(sentences, dbmodels.Sentence{Sentence: s})
	}
	convertedTranslations = append(convertedTranslations, dbmodels.Translation{
		English:   translation.English,
		Sentences: sentences,
	})

	ret := &dbmodels.Word{
		Polish:       polish,
		Translations: convertedTranslations,
	}
	database.DB.Create(ret)
	return &model.Word{}, nil
}

// DeleteWord is the resolver for the deleteWord field.
func (r *mutationResolver) DeleteWord(ctx context.Context, polish string) (string, error) {
	var word dbmodels.Word
	// Find the word by its Polish name
	if err := database.DB.Where("polish = ?", polish).First(&word).Error; err != nil {
		panic(err)
	}

	fmt.Println(word)

	// Delete the word (cascade deletes translations & sentences)
	if err := database.DB.Delete(&word).Error; err != nil {
		panic(err)
	}

	return polish, nil
}

// Words is the resolver for the words field.
func (r *queryResolver) Words(ctx context.Context) ([]*model.Word, error) {
	return r.words, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
